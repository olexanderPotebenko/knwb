и**************************************
Вывод информации о текущем коммите
git show 
С дополнительной информацией
git show --pretty=fuller
Отобразить конкретный коммит
git show hash

***************************************
Добавление файлов
git add *
Построчное индексирование файла
git add -p <file>
Убрать файл из индекса
git reset HEAD <file>
Игрнорировать .gitignore 
git add -f //или --force

***************************************
Удаление файла
git rm -r <directory> // = rm -r <directory>; git add <directory>
git rm -r --cashed <directory> //удалит из индекса но оставит в рабочем каталоге
--cashed // операция производиться только с индексом в обход рабочей дирректории
git rm -f <file> //когда файл проиндекирован и изменет позволяет проигнорировать предупреждение и совершить операцию
git mv <file1> <file2> //переименует файл и добавит изменение в индекс = mv <file1> <file2>; git add <file1> <file2>
git checkout -f HEAD // удаление всех непроиндексированных изменений
или git checkout -f

***************************************
Удаление файлов из индекса
git reset
git reset <file name>
git reset <hash> <file name> // возвращает файл на состояние
// коммита <hash> в индекс. При этом в рабочей дирректории
// <file name> не измениться
git checkout <hash> <file name> // изменит как индекс так и рабочуюю дирректорию

***************************************
Коммиты без add
git commit -a //работает для проиндексированных файлов
git commit <path> //проиндексирует изменение и совершит коммит определенного файла в обход уже проиндексированным изменениям

***************************************
Настройка .gitignore
git config --global core.excludesFile ~/.gitignore //указание глобального файла настроек

***************************************
Ветвление branches
Ветка - ссылка на коммит
git branch -v //выводит ветки со ссылками на коммиты
git checkout -b <new branch> // создать ветку и переключиться на нее
git stash // удаляеть незакоммиченные изменения и помещает в специальный архив
git stash pop // восстановить заархивированные изменения. При этом восстановить изменения можно и в другую ветку.

Перенисение незакомиченных изменений на новую ветку
git checkout -b <new branch> //при этом все изменения перенесуться на новую ветку

Перенесение ветки на предидущий коммит
1) git checkout -b <new branch> //создаем и переключаемся на новую ветку
2) git branch -f master <hash> // переносим старую ветку на прошлый коммит
2.1) или git checkout -B master <hash> //перенесет ветку master на коммит и переключеться на master

Восстановление файла на момент последнего коммита
git checkout HEAD <file name> //поместить файл из коммита в индекс и рабочую дирректорию
git checkout HEAD -- <file name> //указываем что <file name> - это файл а не ветка
git checkout <file name> // поместит файл из индекса в рабочую дирректорию

***************************************
Просмотр изменений
git log --oneline // вывод коммитов в одну строку
git show @ //@ - сокращение для HEAD
git show @~3 // показать коммит 3 коммита назад
git show @~3:<file path> //показать файл коммита 3 коммита назад
git show :<file path> // показать файл до индексации
git show :/regExp(word) // найти коммит по совпадению с описанием

***************************************
Слияние веток
1) git merge fix // перенесение @ master на коммит fix
1.1) git checkout -B master fix 
//ORIG_HEAD - временная ссылка, ведущая на предидущий HEAD
git branch -f master ORIG_HEAD // возврат ветки master на предидущий коммит
// ORIG_HEAD находиться в фвйле .git/ORIG_HEAD

***************************************
Удаление ветки
git branch -d <branch name> // комманда удаляет только ветку, но не сами коммиты 
//если <branch name> ветка содержит уникальные коммиты, такие коммиты 
//будут недостижимыми и со временем будут удалены автоматичесски

***************************************
История переключения веток git reflog
.git/logs/HEAD содержит историю переключения для HEAD
// reflog храниться локально

git reflog <branch name>
git reflog --date=iso <branch name>

***************************************
Удаление непроиндексированных файлов
git clean -dxf // d - удаление файлов и дирректорий
// х - удаление файлов, игнорируемых .gitignore

***************************************
Отмена изменений, удаление коммитов
git reset --hard @~ // сбросить последний коммит
// возвращает индекс и рабочуюю директорию в состояние последнего коммита
git reset --hard ORIG_HEAD // вернуться на сброшенный комит
git reflog master // позволит узнать hash коммита, с которого производился сброс
git reset --soft @~ //переносит HEAD на предидущий коммит, но не изменяет файлы в индексе и рабочей дирректории
git commit -c ORIG_HEAD // использовать описание предидущего коммита
// -c -с редактированием
// -С - без редактирования

Исправление последнего коммита
1) git add <file path> // вносим изменение в текущий файл
// и индексируем
2 ) git commit --amend // команда переносит HEAD на предидущий коммит, не изменяя индекс и рабочую
// дурректорию. Далее создает новый коммит, заимствуя описание из ORIG_HEAD.

Изменение описания коммита
git commit --amend -m 'описание' // комманда вернет HEAD назад и пересоздаст коммит с новым описанием

Смешанный reset 
//( режим reset по умолчинию )
git reset --mixed @~ // переносит HEAD на предидущий коммит, сбрасывает индекс, но не изменяет рабочую дирректорию

***************************************
Сравнение коммитов, просмотр изменений
git diff master...feature // показывает изменений с момента
// когда features образовалась из master до ее текущего состояния 

git diff //сравнивает рабочуу дирректорию с индексом
git diff HEAD // сравнивает рабочую дирректорию с прошлым коммитом

git diff --cashed // сравнит то что в индексе с HEAD

git commit -v //покажет diff

git diff master features index.html 

git diff commit1:path commit2:path
