Вывод информации о текущем коммите
git show 
С дополнительной информацией
git show --pretty=fuller
Отобразить конкретный коммит
git show hash

Добавление файлов
git add *
Построчное индексирование файла
git add -p <file>
Убрать файл из индекса
git reset HEAD <file>
Игрнорировать .gitignore 
git add -f //или --force

Удаление файла
git rm -r <directory> // = rm -r <directory>; git add <directory>
git rm -r --cashed <directory> //удалит из индекса но оставит в рабочем каталоге
--cashed // операция производиться только с индексом в обход рабочей дирректории
git rm -f <file> //когда файл проиндекирован и изменет позволяет проигнорировать предупреждение и совершить операцию
git mv <file1> <file2> //переименует файл и добавит изменение в индекс = mv <file1> <file2>; git add <file1> <file2>
git checkout -f HEAD // удаление всех непроиндексированных изменений
или git checkout -f

Коммиты без add
git commit -a //работает для проиндексированных файлов
git commit <path> //проиндексирует изменение и совершит коммит определенного файла в обход уже проиндексированным изменениям

Настройка .gitignore
git config --global core.excludesFile ~/.gitignore //указание глобального файла настроек

Ветвление branches
Ветка - ссылка на коммит
git branch -v //выводит ветки со ссылками на коммиты
git checkout -b <new branch> // создать ветку и переключиться на нее
git stash // удаляеть незакоммиченные изменения и помещает в специальный архив
git stash pop // восстановить заархивированные изменения. При этом восстановить изменения можно и в другую ветку.

Перенисение незакомиченных изменений на новую ветку
git checkout -b <new branch> //при этом все изменения перенесуться на новую ветку
Перенесение ветки на предидущий коммит
git checkout -b <new branch> //создаем и переключаемся на новую ветку
git branch -f master <hash> // переносим старую ветку на прошлый коммит
или git checkout -B master <hash> //перенесет ветку master на коммит и переключеться на master

