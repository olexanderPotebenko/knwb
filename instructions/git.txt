Посмотреть ветки. Ветка со звездочкой будет основной
git branch

Создать ветку
git branch [branch-name]

Переключиться на ветку
git checkout [branch-name]
or
git switch [branch-name]

Создать ветку и сразу на нее переключиться
git checkout -b [branch-name]

Слияние веток. При слиянии веток, принимает изменения та, на которой мы сейчас находимся. При слиянии наша ветка добавляет себе родителя, тоесть в последствии будет ссылаться на +1 commit-parrent.
git merge [branch-name]

Перебазирование. При перебазировании текущая ветка будет заимствовать коммиты с другой. 
git rebase [branch-name].

Переключение на коммит
Введя 
git checkout [commit-hash]
Мы отключаем HEAD от ветки и подключаем HEAD к коммиту. Чтобы добавить последующие коммиты в новую ветку, необходимо
git switch -c <new-branch-name>
Для переключения можно не вводить все символы hash-а

Относительные ссылки
Каретка ^ - позволяет найти и переместиться к родителю указанного коммита(ветки)
git checkout main^
переместит HEAD на прошлый коммит
Как относительную ссылку можно использовать и сам HEAD
git checkout HEAD^
Тильда позволяет указать колличесвто перемещений вверх
git checkout HEAD~3 
равносильно
git checkout HEAD^^^

Форсирование ветки (Branch forsing: branch -f) позволяет переместить ветку
git branch -f main HEAD~3

Отмена изменений (revert, reset)
git reset HEAD^ (переписывание истории)
- перемещает текущую ветку на предидущий коммит, как будто текущего коммита никогда не существовало. reset работает только для локального репозитория


